"""
3. Создайте собственный класс-исключение, который должен проверять содержимое списка на наличие только чисел.
Проверить работу исключения на реальном примере.
Необходимо запрашивать у пользователя данные и заполнять список.
Класс-исключение должен контролировать типы данных элементов списка.

Примечание:
    длина списка не фиксирована.
    Элементы запрашиваются бесконечно,
    пока пользователь сам не остановит работу скрипта, введя, например, команду “stop”.
    При этом скрипт завершается, сформированный список выводится на экран.

Подсказка:
    для данного задания примем, что пользователь может вводить только числа и строки.
    При вводе пользователем очередного элемента необходимо реализовать проверку типа элемента
    и вносить его в список, только если введено число.
    Класс-исключение должен не позволить пользователю ввести текст (не число)
    и отобразить соответствующее сообщение.
    При этом работа скрипта не должна завершаться.
"""


class NotANumberError(Exception):
    def __init__(self, txt=''):
        self.txt = txt


def is_num(symbols):
    for symbol in symbols:
        if symbol not in '0123456789':
            return False
    return True


digit_list = []

while True:
    try:
        user_input = input('Введите число или "stop", для выхода\n>>> ')
        if user_input.lower() == 'stop':
            break
        if not is_num(user_input):
            raise NotANumberError('Введено не число!')
    except NotANumberError as e:
        print(e)
    else:
        digit_list.append(int(user_input))

print(f'Введённые числа: {digit_list}')
